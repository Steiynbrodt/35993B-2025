VEX Navigation System (NAVI) - Documentation & Explanation
==========================================================

Overview
--------
This navigation system uses an A* pathfinding algorithm on a grid to guide a VEX robot from a start to a goal position. It supports:
- Obstacle avoidance (with margin)
- Path simplification (removing unnecessary waypoints)
- Path smoothing (line-of-sight skipping)
- Adaptive deviation correction (missile-like guidance)
- Stuck detection and automatic replanning
- Heading correction at waypoints
- Goal overshoot handling
- Parameter tuning for easy adjustment

Key Concepts
------------
- **Grid Representation:** The field is divided into a 73x73 grid. Each cell represents a region of the field.
- **Waypoints:** The path is a sequence of grid cells (waypoints) from start to goal. Only direction-changing waypoints are kept after simplification.
- **A* Algorithm:** Finds the shortest path from start to goal, considering obstacles.
- **Path Simplification:** Removes intermediate waypoints that are collinear (including diagonals), so the robot only stops/turns at direction changes.
- **Path Smoothing:** Further reduces waypoints by skipping over those that can be reached in a straight line without hitting obstacles.
- **Missile Guidance Correction:** At each direction-changing waypoint, the robot stops, checks its actual position (using GPS), and compares it to the planned waypoint. If deviation is too large, it replans from its current position.
- **Heading Correction:** At each waypoint, the robot checks its heading and corrects it if necessary before proceeding.
- **Stuck Detection:** If the robot is not making progress, it marks its current cell as an obstacle and replans.
- **Goal Overshoot Handling:** If the robot overshoots the goal, it replans to correct its position.

Main Functions
--------------
- `NAVI(double targetXmm, double targetYmm)`: Main entry point. Plans and follows a path to the target position in millimeters.
- `calculatePath()`: Runs A* to find a path from the current start to the goal.
- `simplifyPath()`: Removes unnecessary waypoints (keeps only direction changes).
- `smoothPath()`: Further reduces waypoints using line-of-sight checks.
- `followPath()`: Drives the robot along the path, stopping at each direction change to check/correct position and heading.
- `driveToWithRecovery(double x, double y)`: Drives to a specific point, with stuck detection and recovery.
- `updateStartPositionFromGPS()`: Updates the start position based on the current GPS reading.

Parameters (for tuning)
-----------------------
- `waypointTolerance`: How close the robot must get to a waypoint to consider it reached (mm).
- `deviationThreshold`: Maximum allowed deviation from the path before replanning (mm).
- `headingTolerance`: Maximum allowed heading error at waypoints (degrees).
- `pathSmoothingEnabled`: Enable/disable path smoothing.

Usage
-----
1. Call `NAVI(targetXmm, targetYmm)` with your desired goal position in millimeters.
2. The robot will plan a path, follow it, and correct itself at each direction-changing waypoint.
3. If the robot gets stuck or deviates too far, it will replan from its current position.

Missile Guidance Analogy
------------------------
The system is inspired by the "missile knows where it is" concept:
- At each waypoint, the robot checks where it is vs. where it should be.
- If the deviation is significant, it replans to correct its course.
- The robot always knows where it was, where it is, and where it isn't, and uses this information to stay on track.

Unit Testing
------------
- See `test.hpp` for unit tests of path logic.

Logging
-------
- GPS data and key events are logged to the SD card for debugging and analysis.

For further details, see comments in `NAVI.hpp`.